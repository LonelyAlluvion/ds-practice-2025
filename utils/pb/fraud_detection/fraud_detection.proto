syntax = "proto3";

package fraud_detection;

service FraudDetection {
    rpc CheckFraud(FraudRequest) returns (FraudResponse);
<<<<<<< HEAD
=======
    rpc ClearOrderData(ClearOrderRequest) returns (ClearOrderResponse); // 新增清理订单方法
>>>>>>> 34889cd (✅ Complete checkpoint-2: system integration with leader election, vector clock and backend orchestration)
}

message FraudRequest {
    string order_id = 1;
    string user_id = 2;
    float amount = 3;
    string shipping_method = 4;
    string user_comment = 5;
    bool gift_wrapping = 6;
    string country = 7;
    int64 timestamp = 8;
    BillingAddress billing_address = 9;
<<<<<<< HEAD
=======
    repeated int32 vector_clock = 10; // 新增向量时钟字段
>>>>>>> 34889cd (✅ Complete checkpoint-2: system integration with leader election, vector clock and backend orchestration)
}

message BillingAddress {
    string street = 1;
    string city = 2;
    string state = 3;
    string zip = 4;
    string country = 5;
<<<<<<< HEAD
}

message FraudResponse {
    bool flagged = 1;
    string reason = 2;
    FraudCheckDetails details = 3;
}

message FraudCheckDetails {
    string order_id = 1;
    string status = 2;
    BillingAddress billing_address = 3;
    string user_comment = 4;
    bool gift_wrapping = 5;
    string shipping_method = 6;
=======
>>>>>>> 34889cd (✅ Complete checkpoint-2: system integration with leader election, vector clock and backend orchestration)
}

message FraudResponse {
    bool flagged = 1;
    string reason = 2;
    FraudCheckDetails details = 3;
    repeated int32 vector_clock = 4; // 传递向量时钟
}

message FraudCheckDetails {
    string order_id = 1;
    string status = 2;
    BillingAddress billing_address = 3;
    string user_comment = 4;
    bool gift_wrapping = 5;
    string shipping_method = 6;
}

message ClearOrderRequest {
    string order_id = 1;
    repeated int32 vector_clock = 2; // 传递当前的向量时钟
}

message ClearOrderResponse {
    bool success = 1;
}

